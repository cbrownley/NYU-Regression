ggplot(concord1, aes(sample = resid(fit_3))) +
stat_qq(shape=1) +
stat_qq_line() +
scale_x_continuous(limits = c(-5,5),
breaks = seq(-4, 4, 2)) +
labs(title = "Quantile-Normal Plot",
y="Residual",
x="Gaussian (normal) Distribution") +
theme_light()
ggplot(concord1, aes(sample = resid(fit_3))) +
stat_qq(shape=1) +
stat_qq_line() +
scale_x_continuous(limits = c(-4.5,4.5),
breaks = seq(-4, 4, 2)) +
labs(title = "Quantile-Normal Plot",
y="Residual",
x="Gaussian (normal) Distribution") +
theme_light()
ggplot(concord1, aes(sample = resid(fit_3))) +
stat_qq(shape=1) +
stat_qq_line() +
scale_x_continuous(limits = c(-4, 4),
breaks = seq(-4, 4, 2)) +
labs(title = "Quantile-Normal Plot",
y="Residual",
x="Gaussian (normal) Distribution") +
theme_light()
car::qqPlot(resid(fit_3), main="QQ Plot")
plot(concord1$income^.3, concord1$water81^.3, xlab="Income to .3 power", ylab="Water Use to .3 power")
abline(coef(fit_3))
# ggplot version
ggplot(concord1, aes(concord1$income^.3, concord1$water81^.3)) +
geom_point() +
geom_abline(intercept = coef(fit_3)[1], slope = coef(fit_3)[2]) +
labs(x = "Income to .3 power", y = "Water Use to .3 power")
# ggplot version
ggplot(concord1, aes(concord1$income^.3, concord1$water81^.3)) +
geom_point(pch=19) +
geom_abline(intercept = coef(fit_3)[1], slope = coef(fit_3)[2]) +
labs(x = "Income to .3 power", y = "Water Use to .3 power")
# ggplot version
ggplot(concord1, aes(income^.3, water81^.3)) +
geom_point(pch=1) +
geom_abline(intercept = coef(fit_3)[1], slope = coef(fit_3)[2]) +
labs(x = "Income to .3 power", y = "Water Use to .3 power")
plot(concord1$income^.3, concord1$water81^.3, xlab="Income to .3 power", ylab="Water Use to .3 power")
abline(coef(fit_3))
# ggplot version
ggplot(concord1, aes(income^.3, water81^.3)) +
geom_point(pch=1, size=3) +
geom_abline(intercept = coef(fit_3)[1], slope = coef(fit_3)[2]) +
labs(x = "Income to .3 power", y = "Water Use to .3 power")
# ggplot version
ggplot(concord1, aes(income^.3, water81^.3)) +
geom_point(pch=1, size=2) +
geom_abline(intercept = coef(fit_3)[1], slope = coef(fit_3)[2]) +
labs(x = "Income to .3 power", y = "Water Use to .3 power")
plot(concord1$income^.3, concord1$water81^.3, xlab="Income to .3 power", ylab="Water Use to .3 power")
abline(coef(fit_3))
# 3. Graph Y_hat against X
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
curve((Y_hat), add = TRUE)
lines(concord1$income, Y_hat)
# 1. Obtain the predicted values (Y_hat*) from the transformed-variables equation. Then do the following:
Y_hat_star <- fit_3$fitted.values
# Since we transformed water use (Y) by raising to the .3 power --  Y* = Y^.3  -- the appropriate inverse
# transformation, applied to the predicted .3 power of water use (Y_hat^.3), is:  Y_hat = (Y_hat*)
Y_hat <- Y_hat_star^(1 / 0.3)
lines(concord1$income, Y_hat)
lines(Y_hat)
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
x_axis <- seq(min(concord1$income), max(concord1$income), length=100)
y_axis <- predict(fit_3, data.frame(x=x_axis^.3)^(1/0.3))
lines(x_axis, y_axis)
# 3. Graph Y_hat against X
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
x_axis <- seq(min(concord1$income), max(concord1$income), length=100)
length(x_axis)
x_axis
Y_hat_star <- predict(fit_3, data.frame(x = x_axis^.3))
Y_hat_star
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
x_axis <- seq(min(inc_3), max(inc_3), length=100)
Y_hat_star <- predict(fit_3, newdata = data.frame(x = x_axis))
#x_axis <- seq(min(inc_3), max(inc_3), length=100)
lines(concord1$income, predict(fit_3)^(1/.3), col = "blue")
# 3. Graph Y_hat against X
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
#x_axis <- seq(min(inc_3), max(inc_3), length=100)
lines(inc_3, predict(fit_3), col = "blue")
fitted <- predict(fit_3)
Y_hat <- fitted^(1/.3)
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
#x_axis <- seq(min(inc_3), max(inc_3), length=100)
fitted <- predict(fit_3)
Y_hat <- fitted^(1/.3)
lines(inc_3^(1/.3), Y_hat, col = "blue")
fitted
Y_hat
fitted <- predict(fit_3, newdata=x_axis)
fitted <- predict(fit_3, newdata=data.frame(x_axis))
x_axis <- seq(min(inc_3), max(inc_3), length=496)
fitted <- predict(fit_3, newdata=data.frame(x_axis))
# 3. Graph Y_hat against X
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
Y_hat <- fitted^(1/.3)
lines(inc_3^(1/.3), Y_hat, col = "blue")
# 1. Obtain the predicted values (Y_hat*) from the transformed-variables equation. Then do the following:
Y_hat_star <- fit_3$fitted.values
Y_hat_star
?predict
x <- rnorm(15)
y <- x + rnorm(15)
predict(lm(y ~ x))
new <- data.frame(x = seq(-3, 3, 0.5))
predict(lm(y ~ x), new, se.fit = TRUE)
x_axis <- seq(min(inc_3), max(inc_3), 0.01)
length(x_axis)
x_axis <- seq(min(inc_3), max(inc_3), 0.01)
new <- data.frame(x = x_axis)
predict(fit_3, newdata=new)
x_axis <- seq(min(concord1$income), max(concord1$income), 100)
x_axis
x_axis <- seq(min(concord1$income), max(concord1$income), 1)
x_axis
min(concord1$income)
max(concord1$income)
new <- data.frame(x = x_axis^.3)
predict(fit_3, newdata=new)
new <- data.frame(x = order(x_axis^.3))
predict(fit_3, newdata=new)
# 3. Graph Y_hat against X
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
curve((coef(fit_3)[1] + coef(fit_3)[2]*inc_3)^(1/.3), add=TRUE)
# 3. Graph Y_hat against X
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
curve((coef(fit_3)[1] + coef(fit_3)[2]*x)^(1/.3), add=TRUE)
# 3. Graph Y_hat against X
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
curve((coef(fit_3)[1] + coef(fit_3)[2]*x), add=TRUE)
# 3. Graph Y_hat against X
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
curve((coef(fit_3)[1] + coef(fit_3)[2]*x^3)^(1/0.3), add=TRUE)
# 3. Graph Y_hat against X
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
curve((coef(fit_3)[1] + coef(fit_3)[2]*x)^(1/0.3), add=TRUE)
# 3. Graph Y_hat against X
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
curve((coef(fit_3)[1] + coef(fit_3)[2]*x)^0.3, add=TRUE)
# 3. Graph Y_hat against X
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
curve((coef(fit_3)[1] + coef(fit_3)[2]*(x^0.3))^(1/0.3), add=TRUE)
# 3. Graph Y_hat against X
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
curve(( coef(fit_3)[1] + coef(fit_3)[2]*(x^0.3) )^(1/0.3), add=TRUE)
?geom_smooth
# ggplot version
ggplot(concord1, aes(income, water81)) +
geom_point(pch=1, size=2) +
geom_smooth(formula = (y ~ x^0.3)^(1/0.3)) +
labs(x = "Income in Thousands", y = "Summer 1981 Water Use")
# ggplot version
ggplot(concord1, aes(income, water81)) +
geom_point(pch=1, size=2) +
geom_smooth(formula = y ~ x,
se = FALSE) +
labs(x = "Income in Thousands", y = "Summer 1981 Water Use")
# ggplot version
ggplot(concord1, aes(income, water81)) +
geom_point(pch=1, size=2) +
geom_smooth(formula = y ~ x^.3,
se = FALSE) +
labs(x = "Income in Thousands", y = "Summer 1981 Water Use")
# ggplot version
ggplot(concord1, aes(income, water81)) +
geom_point(pch=1, size=2) +
geom_smooth(formula = y ~ poly(x, .3),
se = FALSE) +
labs(x = "Income in Thousands", y = "Summer 1981 Water Use")
# ggplot version
ggplot(concord1, aes(income, water81)) +
geom_point(pch=1, size=2) +
geom_line(aes(y = ( coef(fit_3)[1] + coef(fit_3)[2]*(income^0.3) )^(1/0.3) )) +
labs(x = "Income in Thousands", y = "Summer 1981 Water Use")
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
curve(( coef(fit_3)[1] + coef(fit_3)[2]*(x^0.3) )^(1/0.3), add=TRUE)
# 3b. lines version
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
lines(concord1$income, ( coef(fit_3)[1] + coef(fit_3)[2]*(concord1$income^0.3) )^(1/0.3), col = "blue")
p1 <- ggplot(concord1, aes(x = income)) +
geom_histogram(aes(y = ..density..), bins = 20, fill='lightgray', col='black') +
stat_function(fun = dnorm,
args = list(mean = mean(concord1$income),
sd   =   sd(concord1$income))) +
scale_y_continuous(labels = number_format(accuracy = 0.01)) +
labs(title = "Histogram",
y = "Density",
x = "Income") +
theme_light()
p1
p2 <- ggplot(concord1, aes(x=factor(0), y = income)) +
stat_boxplot(geom = "errorbar",
width = 0.10) +
geom_boxplot(outlier.shape = 1) +
stat_summary(fun = "mean", geom = "point", shape = 23, size = 3, fill = "black") +
labs(title = "Boxplot",
y = "Income",
x = NULL) +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p2
dat <- as.data.frame(symdat(concord1$income))
p3 <- ggplot(dat, aes(v, u)) +
geom_point(shape=1) +
geom_abline() +
labs(title = "Symmetry Plot",
y="Distance above median",
x="Distance below median") +
theme_light()
p3
# 4. Quantile-Normal Plot
p4 <- ggplot(concord1, aes(sample = income)) +
stat_qq(shape=1) +
stat_qq_line() +
labs(title = "Quantile-Normal Plot",
y="Residual",
x="Gaussian (normal) Distribution") +
theme_light()
p4
# https://cran.r-project.org/web/packages/egg/vignettes/Ecosystem.html
# https://cran.r-project.org/web/packages/egg/vignettes/Overview.html
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
p1 <- ggplot(concord1, aes(x = income^.3)) +
geom_histogram(aes(y = ..density..), bins = 10, fill='lightgray', col='black') +
stat_function(fun = dnorm,
args = list(mean = mean(concord1$income^.3),
sd   =   sd(concord1$income^.3))) +
scale_y_continuous(labels = number_format(accuracy = 0.01)) +
scale_x_continuous(limits = c(1,4)) +
labs(title = "Histogram",
y = "Density",
x = "Income^.3") +
theme_light()
p1
# 2. Boxplot
p2 <- ggplot(concord1, aes(x=factor(0), y = income^.3)) +
stat_boxplot(geom = "errorbar",
width = 0.10) +
geom_boxplot(outlier.shape = 1) +
stat_summary(fun = "mean", geom = "point", shape = 23, size = 3, fill = "black") +
labs(title = "Boxplot",
y = "Income^.3",
x = NULL) +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p2
# 3. Symmetry Plot
# LearnEDAfunctions::symplot(x)
# https://rdrr.io/github/bayesball/LearnEDAfunctions/src/R/symplot.R
symdat <- function(d){
n <- length(d)
no <- floor((n + 1) / 2)
sd <- sort(d)
i <- 1 : no
u <- sd[n + 1 - i] - median(d)
v <- median(d) - sd[i]
return(list("v"=v, "u"=u))
}
dat <- as.data.frame(symdat(concord1$income^.3))
p3 <- ggplot(dat, aes(v, u)) +
geom_point(shape=1) +
geom_abline() +
labs(title = "Symmetry Plot",
y="Distance above median",
x="Distance below median") +
theme_light()
p3
# 4. Quantile-Normal Plot
p4 <- ggplot(concord1, aes(sample = income^.3)) +
stat_qq(shape=1) +
stat_qq_line() +
labs(title = "Quantile-Normal Plot",
y="Residual",
x="Gaussian (normal) Distribution") +
theme_light()
p4
# https://cran.r-project.org/web/packages/egg/vignettes/Ecosystem.html
# https://cran.r-project.org/web/packages/egg/vignettes/Overview.html
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
# https://www.statology.org/overlay-normal-curve-histogram-in-r/
p1 <- ggplot(concord1, aes(x = income)) +
geom_histogram(aes(y = ..density..), bins = 20, fill='lightgray', col='black') +
stat_function(fun = dnorm,
args = list(mean = mean(concord1$income),
sd   =   sd(concord1$income))) +
scale_y_continuous(labels = number_format(accuracy = 0.01)) +
labs(title = "Histogram",
y = "Density",
x = "Income") +
theme_light()
p1
# 2. Boxplot
p2 <- ggplot(concord1, aes(x=factor(0), y = income)) +
stat_boxplot(geom = "errorbar",
width = 0.10) +
geom_boxplot(outlier.shape = 1) +
stat_summary(fun = "mean", geom = "point", shape = 23, size = 3, fill = "black") +
labs(title = "Boxplot",
y = "Income",
x = NULL) +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p2
# 3. Symmetry Plot
# LearnEDAfunctions::symplot(x)
# https://rdrr.io/github/bayesball/LearnEDAfunctions/src/R/symplot.R
symdat <- function(d){
n <- length(d)
no <- floor((n + 1) / 2)
sd <- sort(d)
i <- 1 : no
u <- sd[n + 1 - i] - median(d)
v <- median(d) - sd[i]
return(list("v"=v, "u"=u))
}
dat <- as.data.frame(symdat(concord1$income))
p3 <- ggplot(dat, aes(v, u)) +
geom_point(shape=1) +
geom_abline() +
labs(title = "Symmetry Plot",
y="Distance above median",
x="Distance below median") +
theme_light()
p3
# 4. Quantile-Normal Plot
p4 <- ggplot(concord1, aes(sample = income)) +
stat_qq(shape=1) +
stat_qq_line() +
labs(title = "Quantile-Normal Plot",
y="Residual",
x="Gaussian (normal) Distribution") +
theme_light()
p4
# https://cran.r-project.org/web/packages/egg/vignettes/Ecosystem.html
# https://cran.r-project.org/web/packages/egg/vignettes/Overview.html
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
# Reduction in skew by raising income to the .3 power
# 1. Histogram
# https://www.statology.org/overlay-normal-curve-histogram-in-r/
p1 <- ggplot(concord1, aes(x = income)) +
geom_histogram(aes(y = ..density..), bins = 20, fill='lightgray', col='black') +
stat_function(fun = dnorm,
args = list(mean = mean(concord1$income),
sd   =   sd(concord1$income))) +
scale_y_continuous(labels = number_format(accuracy = 0.01)) +
labs(title = "Histogram",
y = "Density",
x = "Income") +
theme_light()
p1
# 2. Boxplot
p3 <- ggplot(concord1, aes(x=factor(0), y = income)) +
stat_boxplot(geom = "errorbar",
width = 0.10) +
geom_boxplot(outlier.shape = 1) +
stat_summary(fun = "mean", geom = "point", shape = 23, size = 3, fill = "black") +
labs(title = "Boxplot",
y = "Income",
x = NULL) +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p3
# 1. Histogram
p2 <- ggplot(concord1, aes(x = income^.3)) +
geom_histogram(aes(y = ..density..), bins = 10, fill='lightgray', col='black') +
stat_function(fun = dnorm,
args = list(mean = mean(concord1$income^.3),
sd   =   sd(concord1$income^.3))) +
scale_y_continuous(labels = number_format(accuracy = 0.01)) +
scale_x_continuous(limits = c(1,4)) +
labs(title = "Histogram",
y = "Density",
x = "Income^.3") +
theme_light()
p2
# 2. Boxplot
p4 <- ggplot(concord1, aes(x=factor(0), y = income^.3)) +
stat_boxplot(geom = "errorbar",
width = 0.10) +
geom_boxplot(outlier.shape = 1) +
stat_summary(fun = "mean", geom = "point", shape = 23, size = 3, fill = "black") +
labs(title = "Boxplot",
y = "Income^.3",
x = NULL) +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p4
# https://cran.r-project.org/web/packages/egg/vignettes/Ecosystem.html
# https://cran.r-project.org/web/packages/egg/vignettes/Overview.html
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
p1 <- ggplot(concord1, aes(x = income)) +
geom_histogram(aes(y = ..density..), bins = 20, fill='lightgray', col='black') +
stat_function(fun = dnorm,
args = list(mean = mean(concord1$income),
sd   =   sd(concord1$income))) +
scale_y_continuous(labels = number_format(accuracy = 0.01)) +
labs(title = "Histogram",
y = "Density",
x = "Income") +
theme_light()
p1
p2 <- ggplot(concord1, aes(x = income^.3)) +
geom_histogram(aes(y = ..density..), bins = 10, fill='lightgray', col='black') +
stat_function(fun = dnorm,
args = list(mean = mean(concord1$income^.3),
sd   =   sd(concord1$income^.3))) +
scale_y_continuous(labels = number_format(accuracy = 0.01)) +
scale_x_continuous(limits = c(1,4)) +
labs(title = "Histogram",
y = "Density",
x = "Income^.3") +
theme_light()
p2
p3 <- ggplot(concord1, aes(x=factor(0), y = income)) +
stat_boxplot(geom = "errorbar",
width = 0.10) +
geom_boxplot(outlier.shape = 1) +
stat_summary(fun = "mean", geom = "point", shape = 23, size = 3, fill = "black") +
labs(title = "Boxplot",
y = "Income",
x = NULL) +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p3
# 2. Boxplot (income^.3)
p4 <- ggplot(concord1, aes(x=factor(0), y = income^.3)) +
stat_boxplot(geom = "errorbar",
width = 0.10) +
geom_boxplot(outlier.shape = 1) +
stat_summary(fun = "mean", geom = "point", shape = 23, size = 3, fill = "black") +
labs(title = "Boxplot",
y = "Income^.3",
x = NULL) +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p4
# https://cran.r-project.org/web/packages/egg/vignettes/Ecosystem.html
# https://cran.r-project.org/web/packages/egg/vignettes/Overview.html
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
# Table 2.3: Regression of .3 power of 1981 water use (wtr81_3)
# on .3 power of household income (inc_3)
fit_3 <- lm(wtr81_3 ~ inc_3, data = concord1)
arm::display(fit_3, digits = 2)
# Raise both 1981 water use and household income to the 0.3 power
wtr81_3 <- concord1$water81^0.3
inc_3 <- concord1$income^0.3
# Table 2.3: Regression of .3 power of 1981 water use (wtr81_3)
# on .3 power of household income (inc_3)
fit_3 <- lm(wtr81_3 ~ inc_3, data = concord1)
arm::display(fit_3, digits = 2)
abline(coef(fit_3))
# Figure 2.15: The relationship between transformed water use (Y^.3)
# and transformed income (X^.3) is linear
plot(concord1$income^.3, concord1$water81^.3, xlab="Income to .3 power", ylab="Water Use to .3 power")
abline(coef(fit_3))
# ggplot version
ggplot(concord1, aes(income^.3, water81^.3)) +
geom_point(pch=1, size=2) +
geom_abline(intercept = coef(fit_3)[1], slope = coef(fit_3)[2]) +
labs(x = "Income to .3 power", y = "Water Use to .3 power")
# 3. Graph Y_hat against X
# Figure 2.17: Curvilinear relation of water use to income
# 3a. Create a scatterplot with income on x-axis and water use on y-axis
plot(concord1$income, concord1$water81, xlab="Income in Thousands", ylab="Summer 1981 Water Use")
# In the above scatterplot, x is income, so below, we raise x to the .3 power since
# income^.3 is the predictor in the fit_3 regression model
# Then, after calculating the fitted values with: coef(fit_3)[1] + coef(fit_3)[2]*(x^0.3)
# We raise these fitted values to the 1 / 0.3 power, the appropriate inverse transformation, to
# return them to their natural units -- cubic feet of water
# Having returned the fitted values to the natural units of Y,
# graphing them against income (X), they trace out a gentle curve
curve(( coef(fit_3)[1] + coef(fit_3)[2]*(x^0.3) )^(1/0.3), add=TRUE)
# 3b. ggplot version
ggplot(concord1, aes(income, water81)) +
geom_point(pch=1, size=2) +
geom_line(aes(y = ( coef(fit_3)[1] + coef(fit_3)[2]*(income^0.3) )^(1/0.3) )) +
labs(x = "Income in Thousands", y = "Summer 1981 Water Use")
library("broom")
library("betareg")
library("tidyverse")
library("rethinking")
library("rstanarm")
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
library("ggplot2")
library("humanize")
library("scales")
library("patchwork")
